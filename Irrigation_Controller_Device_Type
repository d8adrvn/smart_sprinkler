/**
  * ******************************************************************************************************************
 *  Irrigation Controller v2.1
 *  This SmartThings Device Type code works with Arduino Irrigation Controller v3 which is also available
 *	at this github site
 *
 *
 * ******************************************************************************************************************
 *  Author: stan@dotson.info
 *  Date: 2013-11-11
 *  Copyright 2014 Stan Dotson
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 * ******************************************************************************************************************
 */
 
 // for the UI
preferences {
	input("oneTimer", "text", title: "Zone One", description: "Zone One Time", required: true)
 	input("twoTimer", "text", title: "Zone Two", description: "Zone Two Time", required: true)
  	input("threeTimer", "text", title: "Zone Three", description: "Zone Three Time", required: true)
  	input("fourTimer", "text", title: "Zone Four", description: "Zone Four Time", required: true)
  	input("fiveTimer", "text", title: "Zone Five", description: "Zone Five Time", required: true)
  	input("sixTimer", "text", title: "Zone Six", description: "Zone Six Time", required: true)
  	input("sevenTimer", "text", title: "Zone Seven", description: "Zone Seven Time", required: true)
  	input("eightTimer", "text", title: "Zone Eight", description: "Zone Eight Time", required: true)
}
    
metadata {
	definition (name: "Irrigation Controller v2.1”, version: “2.1”, author: "stan@dotson.info") {
    	capability "Switch"
        capability "Polling"
        capability "Refresh"
		command "RelayOn1"
		command "RelayOff1"
		command "RelayOn2"
		command "RelayOff2"
		command "RelayOn3"
		command "RelayOff3"
		command "RelayOn4"
		command "RelayOff4"
		command "RelayOn5"
		command "RelayOff5"
		command "RelayOn6"
		command "RelayOff6"
		command "RelayOn7"
		command "RelayOff7"
		command "RelayOn8"
		command "RelayOff8"
        command "update"
       
}

simulator {
		// TODO: define status and reply messages here
}
    
tiles {
	standardTile("allZonesTile", "device.switch", width: 1, height: 1, canChangeIcon: true, canChangeBackground: true) {
    	state "off", label: 'Start', action: "switch.on", icon: "st.Outdoor.outdoor12", backgroundColor: "#ffffff", nextState: "starting"
		state "on", label: 'Running', action: "switch.off", icon: "st.Health & Wellness.health7", backgroundColor: "#53a7c0", nextState: "stopping"
		state "starting", label: 'Starting...', action: "switch.off", icon: "st.Health & Wellness.health7", backgroundColor: "#53a7c0", nextState: "off"
		state "stopping", label: 'Stopping...', action: "switch.off", icon: "st.Health & Wellness.health7", backgroundColor: "#53a7c0", nextState: "off"
	}
  	standardTile("zoneOneTile", "device.zoneOne", width: 1, height: 1, canChangeIcon: true, canChangeBackground: true) {
		state "off1", label: 'One', action: "RelayOn1", icon: "st.Outdoor.outdoor12", backgroundColor: "#ffffff",nextState: "sending1"
		state "sending1", label: 'sending', action: "RelayOff1", icon: "st.Health & Wellness.health7", backgroundColor: "#cccccc", nextState: "off1"
        state "q1", label: 'One', action: "RelayOff1",icon: "st.Outdoor.outdoor12", backgroundColor: "#c0a353", nextState: "sending1"
        state "on1", label: 'One', action: "RelayOff1",icon: "st.Outdoor.outdoor12", backgroundColor: "#53a7c0", nextState: "sending1"
    }     
	standardTile("zoneTwoTile", "device.zoneTwo", width: 1, height: 1, canChangeIcon: true, canChangeBackground: true) {
		state "off2", label: 'Two', action: "RelayOn2", icon: "st.Outdoor.outdoor12", backgroundColor: "#ffffff", nextState: "sending2"
		state "sending2", label: 'sending', action: "RelayOff2", icon: "st.Health & Wellness.health7", backgroundColor: "#cccccc", nextState: "off2"
        state "q2", label: 'Two', action: "RelayOff2",icon: "st.Outdoor.outdoor12", backgroundColor: "#c0a353", nextState: "sending2"
        state "on2", label: 'Two', action: "RelayOff2",icon: "st.Outdoor.outdoor12", backgroundColor: "#53a7c0", nextState: "sending2"
    } 
    standardTile("zoneThreeTile", "device.zoneThree", width: 1, height: 1, canChangeIcon: true, canChangeBackground: true) {
		state "off3", label: 'Three', action: "RelayOn3", icon: "st.Outdoor.outdoor12", backgroundColor: "#ffffff", nextState: "sending3"
		state "sending3", label: 'sending', action: "RelayOff3", icon: "st.Health & Wellness.health7", backgroundColor: "#cccccc", nextState: "off3"
        state "q3", label: 'Three', action: "RelayOff3",icon: "st.Outdoor.outdoor12", backgroundColor: "#c0a353", nextState: "sending3"
        state "on3", label: 'Three', action: "RelayOff3",icon: "st.Outdoor.outdoor12", backgroundColor: "#53a7c0", nextState: "sending3"
    } 
    standardTile("zoneFourTile", "device.zoneFour", width: 1, height: 1, canChangeIcon: true, canChangeBackground: true) {
		state "off4", label: 'Four', action: "RelayOn4", icon: "st.Outdoor.outdoor12", backgroundColor: "#ffffff", nextState: "sending4"
		state "sending4", label: 'sending', action: "RelayOff4", icon: "st.Health & Wellness.health7", backgroundColor: "#cccccc", nextState: "off4"
        state "q4", label: 'Four', action: "RelayOff4",icon: "st.Outdoor.outdoor12", backgroundColor: "#c0a353", nextState: "sending4"
        state "on4", label: 'Four', action: "RelayOff4",icon: "st.Outdoor.outdoor12", backgroundColor: "#53a7c0", nextState: "sending4"
    } 
    standardTile("zoneFiveTile", "device.zoneFive", width: 1, height: 1, canChangeIcon: true, canChangeBackground: true) {
		state "off5", label: 'Five', action: "RelayOn5", icon: "st.Outdoor.outdoor12", backgroundColor: "#ffffff", nextState: "sending5"
		state "sending5", label: 'sending', action: "RelayOff5", icon: "st.Health & Wellness.health7", backgroundColor: "#cccccc", nextState: "off5"
        state "q5", label: 'Five', action: "RelayOff5",icon: "st.Outdoor.outdoor12", backgroundColor: "#c0a353", nextState: "sending5"
        state "on5", label: 'Five', action: "RelayOff5",icon: "st.Outdoor.outdoor12", backgroundColor: "#53a7c0", nextState: "sending5"
    } 
    standardTile("zoneSixTile", "device.zoneSix", width: 1, height: 1, canChangeIcon: true, canChangeBackground: true) {
		state "off6", label: 'Six', action: "RelayOn6", icon: "st.Outdoor.outdoor12", backgroundColor: "#ffffff", nextState: "sending6"
		state "sending6", label: 'sending', action: "RelayOff6", icon: "st.Health & Wellness.health7", backgroundColor: "#cccccc", nextState: "off6"
        state "q6", label: 'Six', action: "RelayOff6",icon: "st.Outdoor.outdoor12", backgroundColor: "#c0a353", nextState: "sending6"
        state "on6", label: 'Six', action: "RelayOff6",icon: "st.Outdoor.outdoor12", backgroundColor: "#53a7c0", nextState: "sending6"
    } 
    standardTile("zoneSevenTile", "device.zoneSeven", width: 1, height: 1, canChangeIcon: true, canChangeBackground: true) {
		state "off7", label: 'Seven', action: "RelayOn7", icon: "st.Outdoor.outdoor12", backgroundColor: "#ffffff", nextState: "sending7"
		state "sending7", label: 'sending', action: "RelayOff7", icon: "st.Health & Wellness.health7", backgroundColor: "#cccccc", nextState: "off7"
        state "q7", label: 'Seven', action: "RelayOff7",icon: "st.Outdoor.outdoor12", backgroundColor: "#c0a353", nextState: "sending7"
        state "on7", label: 'Seven', action: "RelayOff7",icon: "st.Outdoor.outdoor12", backgroundColor: "#53a7c0", nextState: "sending7"
    } 
  	standardTile("zoneEightTile", "device.zoneEight", width: 1, height: 1, canChangeIcon: true, canChangeBackground: true) {
		state "off8", label: 'Eight', action: "RelayOn8", icon: "st.Outdoor.outdoor12", backgroundColor: "#ffffff", nextState: "sending8"
		state "sending8", label: 'sending', action: "RelayOff8", icon: "st.Health & Wellness.health7", backgroundColor: "#cccccc", nextState: "off8"
        state "q8", label: 'Eight', action: "RelayOff8",icon: "st.Outdoor.outdoor12", backgroundColor: "#c0a353", nextState: "sending8"
        state "on8", label: 'Eight', action: "RelayOff8",icon: "st.Outdoor.outdoor12", backgroundColor: "#53a7c0", nextState: "sending8"
   	} 
	standardTile("refreshTile", "device.refresh", width: 1, height: 1, canChangeIcon: true, canChangeBackground: true, decoration: "flat") {        	
		state "ok", label: "", action: "update", icon: "st.secondary.refresh", backgroundColor: "#ffffff"
    }
	main "allZonesTile"
	details(["zoneOneTile","zoneTwoTile","zoneThreeTile","zoneFourTile","zoneFiveTile","zoneSixTile","zoneSevenTile","zoneEightTile","refreshTile"])
	}
}

// parse events into attributes to create events
def parse(String description) {
	log.debug "Parsing '${description}'"
	log.debug "Parsed: ${zigbee.parse(description)}"

	def value = zigbee.parse(description)?.text
  	if (value != null && value != " " && value != '"') {
    	String delims = ","
    	String[] tokens = value.split(delims)
   		for (int x=0; x<tokens.length; x++) {
            def isStateChange = tokens[x] != "ping"  //evaluates whether value is something other than ping
			def isPhysical = tokens[x] in ["on","off","on1","q1","off1","on2","q2","off2","on3","q3","off3","on4","q4","off4",
    		"on5","q5","off5","on6","q6","off6","on7","q7","off7","on8","q8","off8"]  //evaluates device completed a physical action, e.g. relay switch
    		def displayed = tokens[x] && isStateChange  //evaluates whether to display message 
    		def linkText = getLinkText(device)
			def descriptionText = getDescriptionText(description, linkText, tokens[x])
			def name = tokens[x] in ["on","off"] ? "switch" : tokens[x] in ["on1","q1", "off1"] ? "zoneOne" : tokens[x] in ["on2","q2", "off2"] ? "zoneTwo" 
    		: tokens[x] in ["on3","q3", "off3"] ? "zoneThree": tokens[x] in ["on4","q4", "off4"] ? "zoneFour": tokens[x] in ["on5","q5", "off5"] ? "zoneFive"
    		: tokens[x] in ["on6","q6", "off6"] ? "zoneSix": tokens[x] in ["on7","q7", "off7"] ? "zoneSeven": tokens[x] in ["on8","q8", "off8"] ? "zoneEight"
    		: tokens[x] in ["ok"] ? "refresh" : null

			def result = createEvent(name: name, value: tokens[x])
			log.debug "Parse returned ${result?.descriptionText}"
			sendEvent(result)
        }
    }
	if(anyZoneOn()) {
		return createEvent(name: "switch", value: "on")
	} 
    else {
		return createEvent(name: "switch", value: "off")
	}  
}

def anyZoneOn() {
    if(device.currentValue("zoneOne") == "on1") return true;
    if(device.currentValue("zoneTwo") == "on2") return true;
    if(device.currentValue("zoneThree") == "on3") return true;
    if(device.currentValue("zoneFour") == "on4") return true;
    if(device.currentValue("zoneFive") == "on5") return true;
    if(device.currentValue("zoneSix") == "on6") return true;
    if(device.currentValue("zoneSeven") == "on7") return true;
    if(device.currentValue("zoneEight") == "on8") return true;
    
    false;
}

// handle commands
def RelayOn1() {
	log.debug "Executing 'on,1'"
	zigbee.smartShield(text: "on,1,${oneTimer}").format()
}

def RelayOff1() {
	log.debug "Executing 'off,1'"
	zigbee.smartShield(text: "off,1").format()
}

def RelayOn2() {
	log.debug "Executing 'on,2'"
	zigbee.smartShield(text: "on,2,${twoTimer}").format()
}

def RelayOff2() {
	log.debug "Executing 'off,2'"
	zigbee.smartShield(text: "off,2").format()
}

def RelayOn3() {
	log.debug "Executing 'on,3'"
	zigbee.smartShield(text: "on,3,${threeTimer}").format()
}

def RelayOff3() {
	log.debug "Executing 'off,3'"
	zigbee.smartShield(text: "off,3").format()
}

def RelayOn4() {
	log.debug "Executing 'on,4'"
	zigbee.smartShield(text: "on,4,${fourTimer}").format()
}

def RelayOff4() {
	log.debug "Executing 'off,4'"
	zigbee.smartShield(text: "off,4").format()
}

def RelayOn5() {
	log.debug "Executing 'on,5'"
	zigbee.smartShield(text: "on,5,${fiveTimer}").format()
}

def RelayOff5() {
	log.debug "Executing 'off,5'"
	zigbee.smartShield(text: "off,5").format()
}

def RelayOn6() {
	log.debug "Executing 'on,6'"
	zigbee.smartShield(text: "on,6,${sixTimer}").format()
}

def RelayOff6() {
	log.debug "Executing 'off,6'"
	zigbee.smartShield(text: "off,6").format()
}

def RelayOn7() {
	log.debug "Executing 'on,7'"
	zigbee.smartShield(text: "on,7,${sevenTimer}").format()
}

def RelayOff7() {
	log.debug "Executing 'off,7'"
	zigbee.smartShield(text: "off,7").format()
}

def RelayOn8() {
	log.debug "Executing 'on,8'"
	zigbee.smartShield(text: "on,8,${eightTimer}").format()
}

def RelayOff8() {
	log.debug "Executing 'off,8'"
	zigbee.smartShield(text: "off,8").format()
}

def on() {
	log.debug "Executing 'allOn'"
	zigbee.smartShield(text: "allOn,${oneTimer},${twoTimer},${threeTimer},${fourTimer},${fiveTimer},${sixTimer},${sevenTimer},${eightTimer}").format()
}

def off() {
	log.debug "Executing 'allOff'"
	zigbee.smartShield(text: "allOff").format()
}

def update() {
	log.debug "Execting checking status"
    zigbee.smartShield(text: "update").format()
}
    
def refresh() {
	log.debug "Executing polling"
    update()
}
    
def poll() {
	log.debug "Executing polling"
    update()
}